{
  "docs": [
    {
      "id": "28f5e6a0-2d06-439d-b947-b7121480c146",
      "doc_id": "28f5e6a0-2d06-439d-b947-b7121480c146",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-12",
        "type": "Post",
        "category": "技术分享",
        "urlname": "redis-key-202309",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Redis"
        ],
        "summary": "做一些C端业务，不可避免的要引入一级缓存来代替数据库的压力并且减少业务响应时间，其实每次引入一个中间件来解决问题的同时，必然会带来很多新的问题需要注意，比如缓存一致性问题。\n那么其实还会有一些其他问题比如使用Redis作为一级缓存时可能带来的热key、大key等问题，本文我们就热key（hot key）问题来讨论，如何合理的解决热key问题。",
        "sort": "",
        "title": "Redis 热key是什么问题，如何导致的？有什么解决方案？",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309121610208.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "28f5e6a0-2d06-439d-b947-b7121480c146"
        }
      ],
      "realName": "Redis 热key是什么问题，如何导致的？有什么解决方案？",
      "relativePath": "/archives/Redis 热key是什么问题，如何导致的？有什么解决方案？.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "3a5d9238-0fa8-4154-a6d5-92340f2ad733",
      "doc_id": "3a5d9238-0fa8-4154-a6d5-92340f2ad733",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "springcloud-data-202309",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "微服务"
        ],
        "summary": "微服务，顾名思义，就是将我们程序拆分为最小化单元来提供服务。在一体化系统中，各个微服务也是不可能独立存在的，那么微服务之间涉及到的数据依赖问题，应该怎么处理呢？我们从场景入手来分析考虑此类问题。",
        "sort": "",
        "title": "微服务之间的数据依赖问题，该如何解决？",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309151218999.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "3a5d9238-0fa8-4154-a6d5-92340f2ad733"
        }
      ],
      "realName": "微服务之间的数据依赖问题，该如何解决？",
      "relativePath": "/archives/微服务之间的数据依赖问题，该如何解决？.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "f8b19b63-1f95-492f-afb0-70b7d69ca735",
      "doc_id": "f8b19b63-1f95-492f-afb0-70b7d69ca735",
      "updated": 1698913380000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "spring-boot-tenant-202309",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "微服务",
          "SAAS"
        ],
        "summary": "常见的技术选择包括：\n• 数据库级多租户：使用多个数据库实例分别存储各个租户的数据，每个租户对应一个独立的数据库。\n• 模式级多租户：使用同一个数据库实例，但是为每个租户创建独立的数据库模式，实现数据隔离。\n• 表级多租户：在同一个数据库模式下，使用不同的表来存储各个租户的数据，实现数据隔离。\n• 应用级多租户：在应用程序中实现租户隔离，例如使用Spring Cloud等微服务框架。\n• 容器级多租户：使用容器技术，为每个租户创建独立的容器，实现资源隔离和控制。\n4 实现多租户架构的注意事项\n• 保证租户数据的隔离性和安全性。\n• 设计合理的租户数据结构和关系模型。\n• 统一管理租户的配置和权限。\n• 保证系统的可扩展性和可伸缩性，支持水平扩展。\n• 保证系统的高可用性和容错性，避免单点故障。\n• 对租户数据进行备份和恢复，保证数据的可靠性和完整性",
        "sort": "",
        "title": "Spring Boot 实现多租户架构：支持应用多租户部署和管理",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309151532992.png",
        "updated": "2023-11-02 16:23:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "f8b19b63-1f95-492f-afb0-70b7d69ca735"
        }
      ],
      "realName": "Spring Boot 实现多租户架构：支持应用多租户部署和管理",
      "relativePath": "/archives/Spring Boot 实现多租户架构：支持应用多租户部署和管理.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "613b560e-75d7-4f45-88e9-b487310cfe82",
      "doc_id": "613b560e-75d7-4f45-88e9-b487310cfe82",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-06-02",
        "type": "Post",
        "category": "碎片杂文",
        "urlname": "lkcoffee-shanghai-coffee-activities-20230602",
        "catalog": [
          "archives"
        ],
        "tags": [
          "咖啡",
          "整活",
          "技术流"
        ],
        "summary": "最近瑞幸在搞活动，每天免费送10000份咖啡，我是个狂热喝咖啡的人儿，今天最后一天来整个活儿，点开瑞幸咖啡小程序主页，banner 栏轮播图中有一张海报入口，操作一通下来，果然，没抢到。\n手速不够快不是主要原因，手指操作延迟 + 系统页面跳转耗时加起来到 http 发出就已经耽误了1 -2 秒钟了，这个时间才是关键，本文从技术角度探讨下怎么在最小成本比如几分钟内，实现一个小工具，来解决这个问题。",
        "sort": "",
        "title": "上海咖啡文化周之薅瑞幸羊毛",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202306021513432.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "613b560e-75d7-4f45-88e9-b487310cfe82"
        }
      ],
      "realName": "上海咖啡文化周之薅瑞幸羊毛",
      "relativePath": "/archives/上海咖啡文化周之薅瑞幸羊毛.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "121dcfb7-7028-42d1-998e-b81fe6e0d870",
      "doc_id": "121dcfb7-7028-42d1-998e-b81fe6e0d870",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-06",
        "type": "Post",
        "category": "技术分享",
        "urlname": "spring-restclient-2023",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "Java"
        ],
        "summary": "Spring 框架一直提供了两种不同的客户端来执行 http 请求:\n• RestTemplate: 它在 Spring 3 中被引入，提供同步的阻塞式通信。\n• WebClient: 它在 Spring 5 的 Spring WebFlux 库中作为一部分被发布。它提供了流式 API,遵循响应式模型。\nRestTemplate 的方法暴露了太多的 HTTP 特性,导致了大量重载的方法，使用成本较高。WebClient 是 RestTemplate 的替代品,支持同步和异步调用。它是 Spring Web Reactive 项目的一部分。\n现在 Spring 6.1 M1 版本引入了 RestClient。一个新的同步 http 客户端,其工作方式与 WebClient 类似,使用与 RestTemplate 相同的基础设施。",
        "sort": "",
        "title": "HttpClient? RestTemplate？WebClient? 不~是 RestClient",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "121dcfb7-7028-42d1-998e-b81fe6e0d870"
        }
      ],
      "realName": "HttpClient! RestTemplate？WebClient! 不~是 RestClient",
      "relativePath": "/archives/HttpClient! RestTemplate？WebClient! 不~是 RestClient.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "d8051be9-7bd7-4b59-a482-f05b9fb15699",
      "doc_id": "d8051be9-7bd7-4b59-a482-f05b9fb15699",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-05-23",
        "type": "Post",
        "category": "技术分享",
        "urlname": "hutool-beanutil-error",
        "catalog": [
          "archives"
        ],
        "tags": [
          "BUG",
          "Java",
          "hutool"
        ],
        "summary": "Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。 JavaBean是一个拥有对属性进行set和get方法的类。它可以被简单地定义为包含setXXX和getXXX方法的对象。在Hutool中，判定Bean的方法为：是否存在只有一个参数的setXXX方法。Bean工具类主要操作setXXX和getXXX方法，如将Bean对象转为Map等。",
        "sort": "",
        "title": "Hutool 5.8.8  BeanUtil.copyProperties 致命异常",
        "status": "Published",
        "cover": "https://plus.hutool.cn/images/logo.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "d8051be9-7bd7-4b59-a482-f05b9fb15699"
        }
      ],
      "realName": "Hutool 5.8.8  BeanUtil.copyProperties 致命异常",
      "relativePath": "/archives/Hutool 5.8.8  BeanUtil.copyProperties 致命异常.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "50c530fc-8d3c-4f6b-9956-3be2602e1be8",
      "doc_id": "50c530fc-8d3c-4f6b-9956-3be2602e1be8",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-21",
        "type": "Post",
        "category": "学习思考",
        "urlname": "efficient-learning-methods-pq4r",
        "catalog": [
          "archives"
        ],
        "tags": [
          "文字",
          "思考",
          "学习"
        ],
        "summary": "在 21 世纪的今天，我们每天都要面临大量的知识和信息。我们每个人都需要不断学习新知识、新思想和进行新的实践。\n这意味着，学习不再是学生阶段才需要做的事情，终身教育应该成为我们工作和生活的有机组成部分。\n在自我学习的过程中，很多人都会尝试寻找高效的学习方法，以便提升自己的学习能力和学习效率。\n接下来我分享的学习方法，不仅是我自己切身实践有效，也有科学依据作为支撑。",
        "sort": "",
        "title": "你有什么值得分享的高效学习方法？",
        "status": "Published",
        "cover": "https://static.effie.co/blog/2021/05/20210524053542357-1024x796.png?x-oss-process=image/auto-orient,1/quality,q_90/format,webp",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "50c530fc-8d3c-4f6b-9956-3be2602e1be8"
        }
      ],
      "realName": "你有什么值得分享的高效学习方法？",
      "relativePath": "/archives/你有什么值得分享的高效学习方法？.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "8900fb84-5f49-4f66-a5fa-fd34b7fd832a",
      "doc_id": "8900fb84-5f49-4f66-a5fa-fd34b7fd832a",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-25",
        "type": "Post",
        "category": "学习思考",
        "urlname": "active-reading-becoming-better-reader",
        "catalog": [
          "archives"
        ],
        "tags": [
          "文字",
          "思考",
          "学习"
        ],
        "summary": "主动阅读是一种积极、深入的阅读方式，它需要读者在阅读过程中利用多种策略，如提问、概括、笔记、推理等，不仅理解文字表意，还要加深对其背后涵义的理解和记忆，同时，将自己的经验和知识运用到阅读中去，以达到更好的阅读效果。主动阅读能够提高我们的阅读能力和思维水平，培养我们批判性地思考和分析问题的能力，帮助我们更好地掌握知识和信息。",
        "sort": "",
        "title": "主动阅读：成为更好的阅读者",
        "status": "Published",
        "cover": "https://static.effie.co/blog/2021/08/20210816143032448-1024x512.png?x-oss-process=image/auto-orient,1/quality,q_90/format,webp",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "8900fb84-5f49-4f66-a5fa-fd34b7fd832a"
        }
      ],
      "realName": "主动阅读：成为更好的阅读者",
      "relativePath": "/archives/主动阅读：成为更好的阅读者.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "e454567c-abfe-4f35-9826-05e8eff97c1f",
      "doc_id": "e454567c-abfe-4f35-9826-05e8eff97c1f",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-27",
        "type": "Post",
        "category": "学习思考",
        "urlname": "iot-prospect-for-java",
        "catalog": [
          "archives"
        ],
        "tags": [
          "思考",
          "物联网"
        ],
        "summary": "物联网的应用场景非常广泛，例如智能家居、智慧城市、智能医疗、智能制造等。智能家居可以通过物联网技术实现家电之间的互联互通，例如智能门锁、智能音响、智能家电等，用户可以通过手机APP或者语音控制完成对家中设备的操作。智慧城市可以通过物联网技术实现城市基础设施之间的互联互通和数据共享，例如智能交通、智能停车、智能照明等，实现城市的智能化管理和优化。智能医疗可以通过物联网技术实现医疗设备之间的互联互通和数据共享，例如智能健康监测设备、智能手环、智能康复仪等，可以有效地提高医疗设备的使用效率和医疗服务的质量。智能制造可以通过物联网技术实现工业设备之间的互联互通和数据共享，例如智能机床、智能物流、智能质检等，可以提高生产线的自动化程度和生产效率。",
        "sort": "",
        "title": "物联网发展及前景如何？物联网开发有哪些板块？java 如何驱动万物互联？",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102204351.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "e454567c-abfe-4f35-9826-05e8eff97c1f"
        }
      ],
      "realName": "物联网发展及前景如何？物联网开发有哪些板块？java 如何驱动万物互联？",
      "relativePath": "/archives/物联网发展及前景如何？物联网开发有哪些板块？java 如何驱动万物互联？.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "3a77d2b4-f1df-48cc-bdc1-3192e46e674c",
      "doc_id": "3a77d2b4-f1df-48cc-bdc1-3192e46e674c",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-28",
        "type": "Post",
        "category": "技术分享",
        "urlname": "api-login-and-jwt-token-generation-using-keycloak",
        "catalog": [
          "archives"
        ],
        "tags": [
          "开发",
          "建站",
          "Java",
          "keycloak",
          "oauth"
        ],
        "summary": "Red Hat SSO (或Keycloak)是领先的Web SSO产品之一，支持SAML 2.0、OpenID Connect和OAuth 2.0等标准，强大之处在于可通过多种方式直接访问Keycloak，包括API调用生成和验证JWT令牌。操作仅限API调用，无需暴露Keycloak的UI给公众。",
        "sort": "",
        "title": "使用 Keycloak 的 API 登录和 JWT 令牌生成",
        "status": "Published",
        "cover": "https://developers.redhat.com/sites/default/files/styles/article_feature/public/blog/2019/12/keycloak10.png?itok=-ExiELH9",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "3a77d2b4-f1df-48cc-bdc1-3192e46e674c"
        }
      ],
      "realName": "使用 Keycloak 的 API 登录和 JWT 令牌生成",
      "relativePath": "/archives/使用 Keycloak 的 API 登录和 JWT 令牌生成.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "4f23b21c-584b-4922-a7dc-1fa3e68e609f",
      "doc_id": "4f23b21c-584b-4922-a7dc-1fa3e68e609f",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-24T00:00:00.000+08:00",
        "type": "Post",
        "category": "创作分享",
        "urlname": "notion-ai-writely",
        "catalog": [
          "archives"
        ],
        "tags": [
          "文字",
          "工具",
          "chatgpt",
          "notion"
        ],
        "summary": "作为NiotionAi的重度依赖者，最近观察到一个比NotionAI更强大而且还免费的插件。一款基于chatGPT技术的写作神器Writely。借助自然语言处理技术，Writely可以自动生成、推荐内容，并进行语法纠错优化。同时提供多种模板和主题，让写作更加高效实用。该工具适合初学者和专业写作者使用",
        "sort": "",
        "title": "Notion AI平替 Writely 基于chatGPT免费实现的写作神器",
        "status": "Published",
        "cover": "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/bd13b709-62b4-45ef-bdf2-cb1a84350da2/WX20230424-180802.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20231108%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231108T075909Z&X-Amz-Expires=3600&X-Amz-Signature=4f8953f5b9ac94928951911af84d79aa0e1b8b6ca1f9d533a6ec516721fc9f74&X-Amz-SignedHeaders=host&x-id=GetObject",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "4f23b21c-584b-4922-a7dc-1fa3e68e609f"
        }
      ],
      "realName": "Notion AI平替 Writely 基于chatGPT免费实现的写作神器",
      "relativePath": "/archives/Notion AI平替 Writely 基于chatGPT免费实现的写作神器.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "921e862a-78e5-4248-97a1-0fc04c2c558b",
      "doc_id": "921e862a-78e5-4248-97a1-0fc04c2c558b",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-01-22",
        "type": "Post",
        "category": "技术分享",
        "urlname": "45",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java"
        ],
        "summary": "String对象常量池String 对象的两种创建方式：String str1 = \"abcd\";//先检查字符串常量池中有没有\"abcd\"，如果字符串常量池中",
        "sort": "",
        "title": "Java基础-String",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/nasa_fingerprints_of_water_on_the_sand.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "921e862a-78e5-4248-97a1-0fc04c2c558b"
        }
      ],
      "realName": "Java基础-String",
      "relativePath": "/archives/Java基础-String.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "f9af0c25-a672-4cac-bc8e-43bb190216fb",
      "doc_id": "f9af0c25-a672-4cac-bc8e-43bb190216fb",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-01-26",
        "type": "Post",
        "category": "技术分享",
        "urlname": "43",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java"
        ],
        "summary": "对象，类类加载一个类的完整生命周期如下：Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？系统加载 Class 类型的文件主要三步:加载->连接",
        "sort": "",
        "title": "Java基础-class",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/woodcuts_11.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "f9af0c25-a672-4cac-bc8e-43bb190216fb"
        }
      ],
      "realName": "Java基础-class",
      "relativePath": "/archives/Java基础-class.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "54c4aad1-0a7a-4a4b-9906-1f54a3810362",
      "doc_id": "54c4aad1-0a7a-4a4b-9906-1f54a3810362",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-02-25",
        "type": "Post",
        "category": "技术分享",
        "urlname": "22",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java",
          "异步编程",
          "多线程"
        ],
        "summary": "线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。",
        "sort": "",
        "title": "Java基础-线程&并发",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/webb1.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "54c4aad1-0a7a-4a4b-9906-1f54a3810362"
        }
      ],
      "realName": "Java基础-线程&并发",
      "relativePath": "/archives/Java基础-线程&并发.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "ba68c9c4-7d5d-4640-80d9-c123616ea287",
      "doc_id": "ba68c9c4-7d5d-4640-80d9-c123616ea287",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-03-08",
        "type": "Post",
        "category": "技术分享",
        "urlname": "44",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java",
          "数据结构"
        ],
        "summary": "这篇文章讲解了Java集合中的ArrayList，它是一种动态数组，可以快速随机访问。相比于Vector，ArrayList不是线程安全的，但是LinkedList则不支持高效的随机元素访问。此外，ArrayList实现了多个接口，包括List、RandomAccess、Cloneable和Serializable。因此，ArrayList在实际应用中非常常见。\n除了ArrayList，文章还介绍了Java中的其他集合类型，如LinkedList和HashMap。LinkedList是一种双向链表，可以在任意位置进行插入和删除操作，但是不支持随机访问。而HashMap是一种基于哈希表实现的Map，可以用于存储键值对。HashMap使用数组和链表结合的方式，来解决哈希冲突的问题，JDK1.8之后还引入了红黑树来优化性能。\n文章还介绍了一些Java集合中的底层实现细节，例如HashMap中的扰动函数、loadFactor加载因子、threshold临界值等。这些细节对于理解集合的工作原理非常重要，也可以帮助我们更好地使用Java集合。\n总之，Java集合是Java编程中非常常用的一部分，掌握好集合的使用方法和底层实现细节，可以帮助我们编写更高效、更易维护的Java代码。",
        "sort": "",
        "title": "Java基础-集合",
        "status": "Published",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "ba68c9c4-7d5d-4640-80d9-c123616ea287"
        }
      ],
      "realName": "Java基础-集合",
      "relativePath": "/archives/Java基础-集合.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "387ccffe-e894-442f-9471-2460619d4e62",
      "doc_id": "387ccffe-e894-442f-9471-2460619d4e62",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "redis-01",
        "catalog": [
          "archives"
        ],
        "tags": [
          "开发",
          "微服务",
          "分布式",
          "Redis",
          "缓存"
        ],
        "summary": "Redis是一种高性能的key-value存储系统，具有以下几个特点：\n1. 内存存储：Redis将数据存储在内存中，因此读写速度非常快，通常比基于磁盘的存储系统快几个数量级。\n2. 数据结构多样：Redis支持多种数据结构，包括字符串、哈希、列表、集合、有序集合等，丰富的数据结构使Redis可以支持更多的应用场景。\n3. 持久化：Redis支持将数据持久化到磁盘上，以保证数据的可靠性。\n4. 高并发性：Redis采用单线程模型，减少了多线程之间的竞争，从而使得Redis具有更高的并发性。\n5. 分布式：Redis提供了集群模式，可以将数据分布到不同的节点上，从而实现水平扩展。",
        "sort": "",
        "title": "Redis 入手知识点",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102210908.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "387ccffe-e894-442f-9471-2460619d4e62"
        }
      ],
      "realName": "Redis 入手知识点",
      "relativePath": "/archives/Redis 入手知识点.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "f2eefe59-c1ef-4dba-847d-6525d1ddc518",
      "doc_id": "f2eefe59-c1ef-4dba-847d-6525d1ddc518",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-03-12",
        "type": "Post",
        "category": "技术分享",
        "urlname": "42",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java",
          "Jvm"
        ],
        "summary": "Java基础-JVM是Java开发者必须要掌握的重要知识点之一，JVM全称为Java Virtual Machine（Java虚拟机），它是Java程序运行的环境，在Java编程中具有极其重要的作用。\n作为Java语言的核心，JVM能够通过将Java代码编译为字节码，再通过字节码的解释器实现Java程序的运行。JVM负责管理应用程序的内存、多线程、垃圾回收等操作，是实现跨平台、自动垃圾回收、安全性高等特性的关键。\n要深入理解JVM，需要掌握JVM的内部机制，包括虚拟机类加载器、运行时数据区域、字节码执行引擎等方面。此外，对于JVM的性能调优及故障排查也非常重要，能够帮助开发者优化应用程序的运行效率。\n总之，掌握Java基础-JVM是Java开发者必须要具备的知识技能，它可以帮助你更好地理解Java程序的运行机制，提高开发效率，提升应用程序的性能以及稳定性。",
        "sort": "",
        "title": "Java基础-JVM",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102223244.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "f2eefe59-c1ef-4dba-847d-6525d1ddc518"
        }
      ],
      "realName": "Java基础-JVM",
      "relativePath": "/archives/Java基础-JVM.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "76be662e-68e2-4e75-8d51-c66197e850d3",
      "doc_id": "76be662e-68e2-4e75-8d51-c66197e850d3",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-07-23",
        "type": "Post",
        "category": "技术分享",
        "urlname": "9",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "Java",
          "Redis"
        ],
        "summary": "记录一次scan和keys的使用,scan和key都是redis搜索key的值函数,但实现却完全不同。生产环境用key的同学准备好跑路吧~keysWarning: consider KEYS as a",
        "sort": "",
        "title": "RedisOperations scan 用法",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102218981.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "76be662e-68e2-4e75-8d51-c66197e850d3"
        }
      ],
      "realName": "RedisOperations scan 用法",
      "relativePath": "/archives/RedisOperations scan 用法.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "a1eb98de-4986-46c0-b1ac-6846629d0819",
      "doc_id": "a1eb98de-4986-46c0-b1ac-6846629d0819",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-04-10",
        "type": "Post",
        "category": "技术分享",
        "urlname": "21",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "Java",
          "响应式",
          "异步编程",
          "WebFlux"
        ],
        "summary": "webFlux 初识LambdaLambda 表达式，有时候也称为匿名函数或箭头函数，几乎在当前的各种主流的编程语言中都有它的身影。Java8 中引入 Lambda 表达式，使原本需要用匿名类实现接口",
        "sort": "",
        "title": "响应式开发之webFlux & Reactor",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/nasa_tim_peake_spacewalk.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "a1eb98de-4986-46c0-b1ac-6846629d0819"
        }
      ],
      "realName": "响应式开发之webFlux & Reactor",
      "relativePath": "/archives/响应式开发之webFlux & Reactor.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "bcd4f723-5f6a-4d94-90a1-63bb8c6dbfcf",
      "doc_id": "bcd4f723-5f6a-4d94-90a1-63bb8c6dbfcf",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-06-02",
        "type": "Post",
        "category": "技术分享",
        "urlname": "18",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "缓存"
        ],
        "summary": "Spring Cache是Spring框架用于支持缓存的模块。它提供了一组缓存抽象，使得我们可以将不同的缓存技术集成到应用程序中，从而提高性能和可扩展性。Spring Cache通过使用轻量级的注释来定义缓存的行为，从而减少了缓存操作的复杂性。此外，Spring Cache还支持事务性缓存，这样可以保证缓存与数据库之间的一致性。总体来说，Spring Cache是一个强大的工具，可以极大地提高应用程序的性能和可用性。",
        "sort": "",
        "title": "spring cache",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102220554.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "bcd4f723-5f6a-4d94-90a1-63bb8c6dbfcf"
        }
      ],
      "realName": "spring cache",
      "relativePath": "/archives/spring cache.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "7d7311ba-8ed2-4a90-91ac-5d2b4a503c4c",
      "doc_id": "7d7311ba-8ed2-4a90-91ac-5d2b4a503c4c",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-28T13:13:00.000+08:00",
        "type": "Post",
        "category": "技术分享",
        "urlname": "authentication-and-authorization-using-the-keycloak-rest-api",
        "catalog": [
          "archives"
        ],
        "tags": [
          "开发",
          "建站",
          "Java",
          "oauth",
          "keycloak"
        ],
        "summary": "Keycloak REST API 可以被用来进行身份验证和授权。使用该API，开发人员可以轻松地在其应用程序中实现安全性验证和授权功能，同时使用Keycloak的内置功能进行管理和配置。Keycloak的REST API还提供了许多不同的终端点来进行用户和角色管理、认证事件和SAML元数据的访问等。 作为一个基于开源的身份和访问管理解决方案，Keycloak的REST API对于任何需要对应用程序进行认证和授权的开发人员都非常有帮助。",
        "sort": "",
        "title": "使用 Keycloak REST API 进行身份验证和授权",
        "status": "Published",
        "cover": "https://www.keycloak.org/docs/latest/authorization_services/images/getting-started/hello-world/create-realm.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "7d7311ba-8ed2-4a90-91ac-5d2b4a503c4c"
        }
      ],
      "realName": "使用 Keycloak REST API 进行身份验证和授权",
      "relativePath": "/archives/使用 Keycloak REST API 进行身份验证和授权.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "807ec69b-8970-4659-8443-d224934a8e7f",
      "doc_id": "807ec69b-8970-4659-8443-d224934a8e7f",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-12-27",
        "type": "Post",
        "category": "技术分享",
        "urlname": "24",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "Java"
        ],
        "summary": "springBoot 三板斧AOPaop是一种面向切面编程 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（缓存，锁） 封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可",
        "sort": "",
        "title": "springBoot三剑客",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102216883.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "807ec69b-8970-4659-8443-d224934a8e7f"
        }
      ],
      "realName": "springBoot三剑客",
      "relativePath": "/archives/springBoot三剑客.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "44263dbd-e5d6-4365-a72e-b0ff92bd0220",
      "doc_id": "44263dbd-e5d6-4365-a72e-b0ff92bd0220",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-08-27",
        "type": "Post",
        "category": "技术分享",
        "urlname": "20",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "微服务",
          "分布式",
          "Redis"
        ],
        "summary": "在SpringCloud体系中，我们知道服务之间的调用是通过http协议进行调用的。而注册中心的主要目的就是维护这些服务的服务列表。我们知道，在Spring中，提供了RestTemplate。RestTemplate是Spring提供的用于访问Rest服务的客户端。而在SpringCloud中也是使用此服务进行服务调用的。",
        "sort": "",
        "title": "RestTemplate与OpenFeign",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/webb2.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "44263dbd-e5d6-4365-a72e-b0ff92bd0220"
        }
      ],
      "realName": "RestTemplate与OpenFeign",
      "relativePath": "/archives/RestTemplate与OpenFeign.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "747841e4-eeac-4349-88b0-63fc6421cf0c",
      "doc_id": "747841e4-eeac-4349-88b0-63fc6421cf0c",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-02-08",
        "type": "Post",
        "category": "技术分享",
        "urlname": "37",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java"
        ],
        "summary": "synchronized 关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。另外，在 Ja",
        "sort": "",
        "title": "Java基础-锁",
        "status": "Published",
        "cover": "https://blog-file.hehouhui.cn/image-1647847160115.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "747841e4-eeac-4349-88b0-63fc6421cf0c"
        }
      ],
      "realName": "Java基础-锁",
      "relativePath": "/archives/Java基础-锁.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "07c3aa88-08b7-4093-9ac6-0a495a187163",
      "doc_id": "07c3aa88-08b7-4093-9ac6-0a495a187163",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "39",
        "catalog": [
          "archives"
        ],
        "tags": [
          "图像处理"
        ],
        "summary": "wkhtmltopdf精讲(原文) 作者：JSON_NULL术语定义文档对象“文档对象”是指PDF文档中的文档对象，共有三种类型的“文档对象”，他们分别是“页面对象”，“封面对象”和“目录对象”。页面",
        "sort": "",
        "title": "wkhtmltopdf详细使用",
        "status": "Published",
        "cover": "https://blog-file.hehouhui.cn/image-1647847511877.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "07c3aa88-08b7-4093-9ac6-0a495a187163"
        }
      ],
      "realName": "wkhtmltopdf详细使用",
      "relativePath": "/archives/wkhtmltopdf详细使用.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "f81c2940-d22e-4782-9d95-d16b57f6d3f4",
      "doc_id": "f81c2940-d22e-4782-9d95-d16b57f6d3f4",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-12-18",
        "type": "Post",
        "category": "技术分享",
        "urlname": "23",
        "catalog": [
          "archives"
        ],
        "tags": [
          "微服务",
          "分布式",
          "Redis"
        ],
        "summary": "一致性hash在Redis 集群模式Cluster中，Redis采用的是分片Sharding的方式，也就是将数据采用一定的分区策略，分发到相应的集群节点中。但是我们使用上述HASH算法进行缓存时，会出",
        "sort": "",
        "title": "Redis集群与特性",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102218848.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "f81c2940-d22e-4782-9d95-d16b57f6d3f4"
        }
      ],
      "realName": "Redis集群与特性",
      "relativePath": "/archives/Redis集群与特性.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "6a6aca31-1871-49f3-a600-5062cb673260",
      "doc_id": "6a6aca31-1871-49f3-a600-5062cb673260",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-17",
        "type": "Post",
        "category": "技术分享",
        "urlname": "41",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Python",
          "健康"
        ],
        "summary": "之前一直使用ffmpeg来进行格式转换，但是将微信的amr转为mp3后语音质量不理想（也可能是我参数没有调正确🤪）。\n于是就继续想解决办法，后来在github瞎逛时看到可以使用silk-v3-decoder来做这件事情。虽然本质上还是使用的ffmpeg来转的，只是封装了一下。",
        "sort": "",
        "title": "silk-v3-decoder 一款微信音频转码的工具",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102212132.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "6a6aca31-1871-49f3-a600-5062cb673260"
        }
      ],
      "realName": "silk-v3-decoder 一款微信音频转码的工具",
      "relativePath": "/archives/silk-v3-decoder 一款微信音频转码的工具.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "a60e468f-c55d-4add-a043-970fc03927d0",
      "doc_id": "a60e468f-c55d-4add-a043-970fc03927d0",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "40",
        "catalog": [
          "archives"
        ],
        "tags": [
          "图像处理"
        ],
        "summary": "“wkhtmltopdf\"，是一个能够把网页/文件转换成PDF的工具。工具全名叫 \"wkhtmltopdf\" ; 是一个使用 Qt WebKit 引擎做渲染的，能够把html 文档转换成 pdf 文档 或 图片(image) 的**“命令行工具”**。\n支持多个平台，可在win，linux，os x 等系统下运行。",
        "sort": "",
        "title": "wkhtmltopdf 安装",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102132809.jpeg",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "a60e468f-c55d-4add-a043-970fc03927d0"
        }
      ],
      "realName": "wkhtmltopdf 安装",
      "relativePath": "/archives/wkhtmltopdf 安装.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "ad9e51f4-9713-4168-8a9d-276033c3998a",
      "doc_id": "ad9e51f4-9713-4168-8a9d-276033c3998a",
      "updated": 1699430280000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-04",
        "type": "Post",
        "category": "技术分享",
        "urlname": "java-sync-introduce-1104",
        "catalog": [
          "archives"
        ],
        "tags": [
          "异步编程",
          "Java",
          "多线程"
        ],
        "summary": "异步执行对于开发者来说并不陌生，在实际的开发过程中，很多场景多会使用到异步，相比同步执行，异步可以大大缩短请求链路耗时时间，比如：发送短信、邮件、异步更新等，这些都是典型的可以通过异步实现的场景。1. 线程Thread\n2. Future\n3. 异步框架CompletableFuture\n4. Spring注解@Async\n5. Spring ApplicationEvent事件\n6. 消息队列\n7. 第三方异步框架，比如Hutool的ThreadUtil\n8. Guava异步",
        "sort": "",
        "title": "Java异步编程方式介绍",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202311042246840.png",
        "updated": "2023-11-08 15:58:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "ad9e51f4-9713-4168-8a9d-276033c3998a"
        }
      ],
      "realName": "Java异步编程方式介绍",
      "relativePath": "/archives/Java异步编程方式介绍.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "397d5281-9f11-4c6f-8430-399176cc403d",
      "doc_id": "397d5281-9f11-4c6f-8430-399176cc403d",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-02-21",
        "type": "Post",
        "category": "技术分享",
        "urlname": "38",
        "catalog": [
          "archives"
        ],
        "tags": [
          "mysql"
        ],
        "summary": "Mysql数据库存储引擎MyISAM引擎 不支持事务支持表级锁（MySql支持两种表级锁，表共享读锁和表独占写锁），但不支持行级锁存储表的总行数一个MyISAM表有三个文件：索引文件（.MYI",
        "sort": "",
        "title": "Mysql数据结构&锁",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102214388.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "397d5281-9f11-4c6f-8430-399176cc403d"
        }
      ],
      "realName": "Mysql数据结构&锁",
      "relativePath": "/archives/Mysql数据结构&锁.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "2084bf16-87dd-4741-89fd-c9e9116ebcbc",
      "doc_id": "2084bf16-87dd-4741-89fd-c9e9116ebcbc",
      "updated": 1698913860000,
      "properties": {
        "password": "GlUw3Orb@0L9Dh{ox}W71jA$4,2SY8t-",
        "icon": "",
        "date": "2023-04-18",
        "type": "Post",
        "category": "",
        "urlname": "20230417",
        "catalog": [
          "archives"
        ],
        "tags": [],
        "summary": "",
        "sort": "",
        "title": "软件架构&数据安全说明",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "updated": "2023-11-02 16:31:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "2084bf16-87dd-4741-89fd-c9e9116ebcbc"
        }
      ],
      "realName": "软件架构&数据安全说明",
      "relativePath": "/archives/软件架构&数据安全说明.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "0d2fc9f8-00d3-40d8-b7bb-cc4dbbb10251",
      "doc_id": "0d2fc9f8-00d3-40d8-b7bb-cc4dbbb10251",
      "updated": 1696747320000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-05",
        "type": "Post",
        "category": "技术分享",
        "urlname": "46",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "微服务",
          "分布式"
        ],
        "summary": "API 网关是一个服务器，是系统对外的唯一入口。API 网关封装了系统内部架构，为每个客户端提供定制的 API。所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有非业务功能。API 网关并不是微服务场景中必须的组件，如下图，不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问",
        "sort": "",
        "title": "API网关之Gateway",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102209640.png",
        "updated": "2023-10-08 14:42:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "0d2fc9f8-00d3-40d8-b7bb-cc4dbbb10251"
        }
      ],
      "realName": "API网关之Gateway",
      "relativePath": "/archives/API网关之Gateway.md",
      "docPath": "source/_posts/archives"
    },
    {
      "id": "e228a385-fd1f-4229-bf2e-2a3e004ad59a",
      "doc_id": "e228a385-fd1f-4229-bf2e-2a3e004ad59a",
      "updated": 1698913440000,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-28",
        "type": "Post",
        "category": "技术分享",
        "urlname": "keycloak-client-oauth-guide",
        "catalog": [
          "archives"
        ],
        "tags": [
          "建站",
          "keycloak",
          "oauth"
        ],
        "summary": "",
        "sort": "",
        "title": "Keycloak 客户端授权服务",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102206180.png",
        "updated": "2023-11-02 16:24:00"
      },
      "catalog": [
        {
          "title": "archives",
          "doc_id": "e228a385-fd1f-4229-bf2e-2a3e004ad59a"
        }
      ],
      "realName": "Keycloak 客户端授权服务",
      "relativePath": "/archives/Keycloak 客户端授权服务.md",
      "docPath": "source/_posts/archives"
    }
  ],
  "catalog": [
    {
      "object": "page",
      "id": "f8b19b63-1f95-492f-afb0-70b7d69ca735",
      "created_time": "2023-09-15T07:15:00.000Z",
      "last_edited_time": "2023-11-02T08:23:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309151532992.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "spring-boot-tenant-202309",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "微服务",
          "SAAS"
        ],
        "summary": "常见的技术选择包括：\n• 数据库级多租户：使用多个数据库实例分别存储各个租户的数据，每个租户对应一个独立的数据库。\n• 模式级多租户：使用同一个数据库实例，但是为每个租户创建独立的数据库模式，实现数据隔离。\n• 表级多租户：在同一个数据库模式下，使用不同的表来存储各个租户的数据，实现数据隔离。\n• 应用级多租户：在应用程序中实现租户隔离，例如使用Spring Cloud等微服务框架。\n• 容器级多租户：使用容器技术，为每个租户创建独立的容器，实现资源隔离和控制。\n4 实现多租户架构的注意事项\n• 保证租户数据的隔离性和安全性。\n• 设计合理的租户数据结构和关系模型。\n• 统一管理租户的配置和权限。\n• 保证系统的可扩展性和可伸缩性，支持水平扩展。\n• 保证系统的高可用性和容错性，避免单点故障。\n• 对租户数据进行备份和恢复，保证数据的可靠性和完整性",
        "sort": "",
        "title": "Spring Boot 实现多租户架构：支持应用多租户部署和管理",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309151532992.png",
        "updated": "2023-11-02 16:23:00"
      },
      "url": "https://www.notion.so/Spring-Boot-f8b19b631f95492fafb070b7d69ca735",
      "public_url": "https://honesty-blog.notion.site/Spring-Boot-f8b19b631f95492fafb070b7d69ca735"
    },
    {
      "object": "page",
      "id": "3a5d9238-0fa8-4154-a6d5-92340f2ad733",
      "created_time": "2023-09-15T04:10:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309151218999.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "springcloud-data-202309",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "微服务"
        ],
        "summary": "微服务，顾名思义，就是将我们程序拆分为最小化单元来提供服务。在一体化系统中，各个微服务也是不可能独立存在的，那么微服务之间涉及到的数据依赖问题，应该怎么处理呢？我们从场景入手来分析考虑此类问题。",
        "sort": "",
        "title": "微服务之间的数据依赖问题，该如何解决？",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309151218999.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/3a5d92380fa84154a6d592340f2ad733",
      "public_url": "https://honesty-blog.notion.site/3a5d92380fa84154a6d592340f2ad733"
    },
    {
      "object": "page",
      "id": "28f5e6a0-2d06-439d-b947-b7121480c146",
      "created_time": "2023-09-12T07:52:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309121610208.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-12",
        "type": "Post",
        "category": "技术分享",
        "urlname": "redis-key-202309",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Redis"
        ],
        "summary": "做一些C端业务，不可避免的要引入一级缓存来代替数据库的压力并且减少业务响应时间，其实每次引入一个中间件来解决问题的同时，必然会带来很多新的问题需要注意，比如缓存一致性问题。\n那么其实还会有一些其他问题比如使用Redis作为一级缓存时可能带来的热key、大key等问题，本文我们就热key（hot key）问题来讨论，如何合理的解决热key问题。",
        "sort": "",
        "title": "Redis 热key是什么问题，如何导致的？有什么解决方案？",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202309121610208.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Redis-key-28f5e6a02d06439db947b7121480c146",
      "public_url": "https://honesty-blog.notion.site/Redis-key-28f5e6a02d06439db947b7121480c146"
    },
    {
      "object": "page",
      "id": "121dcfb7-7028-42d1-998e-b81fe6e0d870",
      "created_time": "2023-09-06T09:02:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "™️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-09-06",
        "type": "Post",
        "category": "技术分享",
        "urlname": "spring-restclient-2023",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "Java"
        ],
        "summary": "Spring 框架一直提供了两种不同的客户端来执行 http 请求:\n• RestTemplate: 它在 Spring 3 中被引入，提供同步的阻塞式通信。\n• WebClient: 它在 Spring 5 的 Spring WebFlux 库中作为一部分被发布。它提供了流式 API,遵循响应式模型。\nRestTemplate 的方法暴露了太多的 HTTP 特性,导致了大量重载的方法，使用成本较高。WebClient 是 RestTemplate 的替代品,支持同步和异步调用。它是 Spring Web Reactive 项目的一部分。\n现在 Spring 6.1 M1 版本引入了 RestClient。一个新的同步 http 客户端,其工作方式与 WebClient 类似,使用与 RestTemplate 相同的基础设施。",
        "sort": "",
        "title": "HttpClient? RestTemplate？WebClient? 不~是 RestClient",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/HttpClient-RestTemplate-WebClient-RestClient-121dcfb7702842d1998eb81fe6e0d870",
      "public_url": "https://honesty-blog.notion.site/HttpClient-RestTemplate-WebClient-RestClient-121dcfb7702842d1998eb81fe6e0d870"
    },
    {
      "object": "page",
      "id": "613b560e-75d7-4f45-88e9-b487310cfe82",
      "created_time": "2023-06-02T07:11:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202306021513432.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "☕"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-06-02",
        "type": "Post",
        "category": "碎片杂文",
        "urlname": "lkcoffee-shanghai-coffee-activities-20230602",
        "catalog": [
          "archives"
        ],
        "tags": [
          "咖啡",
          "整活",
          "技术流"
        ],
        "summary": "最近瑞幸在搞活动，每天免费送10000份咖啡，我是个狂热喝咖啡的人儿，今天最后一天来整个活儿，点开瑞幸咖啡小程序主页，banner 栏轮播图中有一张海报入口，操作一通下来，果然，没抢到。\n手速不够快不是主要原因，手指操作延迟 + 系统页面跳转耗时加起来到 http 发出就已经耽误了1 -2 秒钟了，这个时间才是关键，本文从技术角度探讨下怎么在最小成本比如几分钟内，实现一个小工具，来解决这个问题。",
        "sort": "",
        "title": "上海咖啡文化周之薅瑞幸羊毛",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202306021513432.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/613b560e75d74f4588e9b487310cfe82",
      "public_url": "https://honesty-blog.notion.site/613b560e75d74f4588e9b487310cfe82"
    },
    {
      "object": "page",
      "id": "d8051be9-7bd7-4b59-a482-f05b9fb15699",
      "created_time": "2023-05-23T04:03:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://plus.hutool.cn/images/logo.jpg"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-05-23",
        "type": "Post",
        "category": "技术分享",
        "urlname": "hutool-beanutil-error",
        "catalog": [
          "archives"
        ],
        "tags": [
          "BUG",
          "Java",
          "hutool"
        ],
        "summary": "Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。 JavaBean是一个拥有对属性进行set和get方法的类。它可以被简单地定义为包含setXXX和getXXX方法的对象。在Hutool中，判定Bean的方法为：是否存在只有一个参数的setXXX方法。Bean工具类主要操作setXXX和getXXX方法，如将Bean对象转为Map等。",
        "sort": "",
        "title": "Hutool 5.8.8  BeanUtil.copyProperties 致命异常",
        "status": "Published",
        "cover": "https://plus.hutool.cn/images/logo.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Hutool-5-8-8-BeanUtil-copyProperties-d8051be97bd74b59a482f05b9fb15699",
      "public_url": "https://honesty-blog.notion.site/Hutool-5-8-8-BeanUtil-copyProperties-d8051be97bd74b59a482f05b9fb15699"
    },
    {
      "object": "page",
      "id": "50c530fc-8d3c-4f6b-9956-3be2602e1be8",
      "created_time": "2023-04-28T05:50:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://static.effie.co/blog/2021/05/20210524053542357-1024x796.png?x-oss-process=image/auto-orient,1/quality,q_90/format,webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "✍️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-21",
        "type": "Post",
        "category": "学习思考",
        "urlname": "efficient-learning-methods-pq4r",
        "catalog": [
          "archives"
        ],
        "tags": [
          "文字",
          "思考",
          "学习"
        ],
        "summary": "在 21 世纪的今天，我们每天都要面临大量的知识和信息。我们每个人都需要不断学习新知识、新思想和进行新的实践。\n这意味着，学习不再是学生阶段才需要做的事情，终身教育应该成为我们工作和生活的有机组成部分。\n在自我学习的过程中，很多人都会尝试寻找高效的学习方法，以便提升自己的学习能力和学习效率。\n接下来我分享的学习方法，不仅是我自己切身实践有效，也有科学依据作为支撑。",
        "sort": "",
        "title": "你有什么值得分享的高效学习方法？",
        "status": "Published",
        "cover": "https://static.effie.co/blog/2021/05/20210524053542357-1024x796.png?x-oss-process=image/auto-orient,1/quality,q_90/format,webp",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/50c530fc8d3c4f6b99563be2602e1be8",
      "public_url": "https://honesty-blog.notion.site/50c530fc8d3c4f6b99563be2602e1be8"
    },
    {
      "object": "page",
      "id": "8900fb84-5f49-4f66-a5fa-fd34b7fd832a",
      "created_time": "2023-04-28T05:45:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://static.effie.co/blog/2021/08/20210816143032448-1024x512.png?x-oss-process=image/auto-orient,1/quality,q_90/format,webp"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "📖"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-25",
        "type": "Post",
        "category": "学习思考",
        "urlname": "active-reading-becoming-better-reader",
        "catalog": [
          "archives"
        ],
        "tags": [
          "文字",
          "思考",
          "学习"
        ],
        "summary": "主动阅读是一种积极、深入的阅读方式，它需要读者在阅读过程中利用多种策略，如提问、概括、笔记、推理等，不仅理解文字表意，还要加深对其背后涵义的理解和记忆，同时，将自己的经验和知识运用到阅读中去，以达到更好的阅读效果。主动阅读能够提高我们的阅读能力和思维水平，培养我们批判性地思考和分析问题的能力，帮助我们更好地掌握知识和信息。",
        "sort": "",
        "title": "主动阅读：成为更好的阅读者",
        "status": "Published",
        "cover": "https://static.effie.co/blog/2021/08/20210816143032448-1024x512.png?x-oss-process=image/auto-orient,1/quality,q_90/format,webp",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/8900fb845f494f66a5fafd34b7fd832a",
      "public_url": "https://honesty-blog.notion.site/8900fb845f494f66a5fafd34b7fd832a"
    },
    {
      "object": "page",
      "id": "3a77d2b4-f1df-48cc-bdc1-3192e46e674c",
      "created_time": "2023-04-28T05:26:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://developers.redhat.com/sites/default/files/styles/article_feature/public/blog/2019/12/keycloak10.png?itok=-ExiELH9"
        }
      },
      "icon": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/icons/lock-keyhole_blue.svg"
        }
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-28",
        "type": "Post",
        "category": "技术分享",
        "urlname": "api-login-and-jwt-token-generation-using-keycloak",
        "catalog": [
          "archives"
        ],
        "tags": [
          "开发",
          "建站",
          "Java",
          "keycloak",
          "oauth"
        ],
        "summary": "Red Hat SSO (或Keycloak)是领先的Web SSO产品之一，支持SAML 2.0、OpenID Connect和OAuth 2.0等标准，强大之处在于可通过多种方式直接访问Keycloak，包括API调用生成和验证JWT令牌。操作仅限API调用，无需暴露Keycloak的UI给公众。",
        "sort": "",
        "title": "使用 Keycloak 的 API 登录和 JWT 令牌生成",
        "status": "Published",
        "cover": "https://developers.redhat.com/sites/default/files/styles/article_feature/public/blog/2019/12/keycloak10.png?itok=-ExiELH9",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Keycloak-API-JWT-3a77d2b4f1df48ccbdc13192e46e674c",
      "public_url": "https://honesty-blog.notion.site/Keycloak-API-JWT-3a77d2b4f1df48ccbdc13192e46e674c"
    },
    {
      "object": "page",
      "id": "7d7311ba-8ed2-4a90-91ac-5d2b4a503c4c",
      "created_time": "2023-04-28T05:06:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.keycloak.org/docs/latest/authorization_services/images/getting-started/hello-world/create-realm.png"
        }
      },
      "icon": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/icons/lock-keyhole_blue.svg"
        }
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-28T13:13:00.000+08:00",
        "type": "Post",
        "category": "技术分享",
        "urlname": "authentication-and-authorization-using-the-keycloak-rest-api",
        "catalog": [
          "archives"
        ],
        "tags": [
          "开发",
          "建站",
          "Java",
          "oauth",
          "keycloak"
        ],
        "summary": "Keycloak REST API 可以被用来进行身份验证和授权。使用该API，开发人员可以轻松地在其应用程序中实现安全性验证和授权功能，同时使用Keycloak的内置功能进行管理和配置。Keycloak的REST API还提供了许多不同的终端点来进行用户和角色管理、认证事件和SAML元数据的访问等。 作为一个基于开源的身份和访问管理解决方案，Keycloak的REST API对于任何需要对应用程序进行认证和授权的开发人员都非常有帮助。",
        "sort": "",
        "title": "使用 Keycloak REST API 进行身份验证和授权",
        "status": "Published",
        "cover": "https://www.keycloak.org/docs/latest/authorization_services/images/getting-started/hello-world/create-realm.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Keycloak-REST-API-7d7311ba8ed24a9091ac5d2b4a503c4c",
      "public_url": "https://honesty-blog.notion.site/Keycloak-REST-API-7d7311ba8ed24a9091ac5d2b4a503c4c"
    },
    {
      "object": "page",
      "id": "e454567c-abfe-4f35-9826-05e8eff97c1f",
      "created_time": "2023-04-27T11:24:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102204351.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-27",
        "type": "Post",
        "category": "学习思考",
        "urlname": "iot-prospect-for-java",
        "catalog": [
          "archives"
        ],
        "tags": [
          "思考",
          "物联网"
        ],
        "summary": "物联网的应用场景非常广泛，例如智能家居、智慧城市、智能医疗、智能制造等。智能家居可以通过物联网技术实现家电之间的互联互通，例如智能门锁、智能音响、智能家电等，用户可以通过手机APP或者语音控制完成对家中设备的操作。智慧城市可以通过物联网技术实现城市基础设施之间的互联互通和数据共享，例如智能交通、智能停车、智能照明等，实现城市的智能化管理和优化。智能医疗可以通过物联网技术实现医疗设备之间的互联互通和数据共享，例如智能健康监测设备、智能手环、智能康复仪等，可以有效地提高医疗设备的使用效率和医疗服务的质量。智能制造可以通过物联网技术实现工业设备之间的互联互通和数据共享，例如智能机床、智能物流、智能质检等，可以提高生产线的自动化程度和生产效率。",
        "sort": "",
        "title": "物联网发展及前景如何？物联网开发有哪些板块？java 如何驱动万物互联？",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102204351.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/java-e454567cabfe4f35982605e8eff97c1f",
      "public_url": "https://honesty-blog.notion.site/java-e454567cabfe4f35982605e8eff97c1f"
    },
    {
      "object": "page",
      "id": "4f23b21c-584b-4922-a7dc-1fa3e68e609f",
      "created_time": "2023-04-24T09:01:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "file",
        "file": {
          "url": "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/bd13b709-62b4-45ef-bdf2-cb1a84350da2/WX20230424-180802.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20231108%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231108T075909Z&X-Amz-Expires=3600&X-Amz-Signature=4f8953f5b9ac94928951911af84d79aa0e1b8b6ca1f9d533a6ec516721fc9f74&X-Amz-SignedHeaders=host&x-id=GetObject",
          "expiry_time": "2023-11-08T08:59:09.186Z"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-24T00:00:00.000+08:00",
        "type": "Post",
        "category": "创作分享",
        "urlname": "notion-ai-writely",
        "catalog": [
          "archives"
        ],
        "tags": [
          "文字",
          "工具",
          "chatgpt",
          "notion"
        ],
        "summary": "作为NiotionAi的重度依赖者，最近观察到一个比NotionAI更强大而且还免费的插件。一款基于chatGPT技术的写作神器Writely。借助自然语言处理技术，Writely可以自动生成、推荐内容，并进行语法纠错优化。同时提供多种模板和主题，让写作更加高效实用。该工具适合初学者和专业写作者使用",
        "sort": "",
        "title": "Notion AI平替 Writely 基于chatGPT免费实现的写作神器",
        "status": "Published",
        "cover": "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/bd13b709-62b4-45ef-bdf2-cb1a84350da2/WX20230424-180802.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20231108%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231108T075909Z&X-Amz-Expires=3600&X-Amz-Signature=4f8953f5b9ac94928951911af84d79aa0e1b8b6ca1f9d533a6ec516721fc9f74&X-Amz-SignedHeaders=host&x-id=GetObject",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Notion-AI-Writely-chatGPT-4f23b21c584b4922a7dc1fa3e68e609f",
      "public_url": "https://honesty-blog.notion.site/Notion-AI-Writely-chatGPT-4f23b21c584b4922a7dc1fa3e68e609f"
    },
    {
      "object": "page",
      "id": "387ccffe-e894-442f-9471-2460619d4e62",
      "created_time": "2023-04-15T14:42:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102210908.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "redis-01",
        "catalog": [
          "archives"
        ],
        "tags": [
          "开发",
          "微服务",
          "分布式",
          "Redis",
          "缓存"
        ],
        "summary": "Redis是一种高性能的key-value存储系统，具有以下几个特点：\n1. 内存存储：Redis将数据存储在内存中，因此读写速度非常快，通常比基于磁盘的存储系统快几个数量级。\n2. 数据结构多样：Redis支持多种数据结构，包括字符串、哈希、列表、集合、有序集合等，丰富的数据结构使Redis可以支持更多的应用场景。\n3. 持久化：Redis支持将数据持久化到磁盘上，以保证数据的可靠性。\n4. 高并发性：Redis采用单线程模型，减少了多线程之间的竞争，从而使得Redis具有更高的并发性。\n5. 分布式：Redis提供了集群模式，可以将数据分布到不同的节点上，从而实现水平扩展。",
        "sort": "",
        "title": "Redis 入手知识点",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102210908.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Redis-387ccffee894442f94712460619d4e62",
      "public_url": "https://honesty-blog.notion.site/Redis-387ccffee894442f94712460619d4e62"
    },
    {
      "object": "page",
      "id": "921e862a-78e5-4248-97a1-0fc04c2c558b",
      "created_time": "2023-03-30T06:41:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/nasa_fingerprints_of_water_on_the_sand.jpg"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-01-22",
        "type": "Post",
        "category": "技术分享",
        "urlname": "45",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java"
        ],
        "summary": "String对象常量池String 对象的两种创建方式：String str1 = \"abcd\";//先检查字符串常量池中有没有\"abcd\"，如果字符串常量池中",
        "sort": "",
        "title": "Java基础-String",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/nasa_fingerprints_of_water_on_the_sand.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Java-String-921e862a78e5424897a10fc04c2c558b",
      "public_url": "https://honesty-blog.notion.site/Java-String-921e862a78e5424897a10fc04c2c558b"
    },
    {
      "object": "page",
      "id": "f9af0c25-a672-4cac-bc8e-43bb190216fb",
      "created_time": "2023-03-30T06:40:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/woodcuts_11.jpg"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-01-26",
        "type": "Post",
        "category": "技术分享",
        "urlname": "43",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java"
        ],
        "summary": "对象，类类加载一个类的完整生命周期如下：Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？系统加载 Class 类型的文件主要三步:加载->连接",
        "sort": "",
        "title": "Java基础-class",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/woodcuts_11.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Java-class-f9af0c25a6724cacbc8e43bb190216fb",
      "public_url": "https://honesty-blog.notion.site/Java-class-f9af0c25a6724cacbc8e43bb190216fb"
    },
    {
      "object": "page",
      "id": "54c4aad1-0a7a-4a4b-9906-1f54a3810362",
      "created_time": "2023-03-30T06:38:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/webb1.jpg"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-02-25",
        "type": "Post",
        "category": "技术分享",
        "urlname": "22",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java",
          "异步编程",
          "多线程"
        ],
        "summary": "线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。",
        "sort": "",
        "title": "Java基础-线程&并发",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/webb1.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Java-54c4aad10a7a4a4b99061f54a3810362",
      "public_url": "https://honesty-blog.notion.site/Java-54c4aad10a7a4a4b99061f54a3810362"
    },
    {
      "object": "page",
      "id": "ba68c9c4-7d5d-4640-80d9-c123616ea287",
      "created_time": "2023-03-30T06:37:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": null,
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-03-08",
        "type": "Post",
        "category": "技术分享",
        "urlname": "44",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java",
          "数据结构"
        ],
        "summary": "这篇文章讲解了Java集合中的ArrayList，它是一种动态数组，可以快速随机访问。相比于Vector，ArrayList不是线程安全的，但是LinkedList则不支持高效的随机元素访问。此外，ArrayList实现了多个接口，包括List、RandomAccess、Cloneable和Serializable。因此，ArrayList在实际应用中非常常见。\n除了ArrayList，文章还介绍了Java中的其他集合类型，如LinkedList和HashMap。LinkedList是一种双向链表，可以在任意位置进行插入和删除操作，但是不支持随机访问。而HashMap是一种基于哈希表实现的Map，可以用于存储键值对。HashMap使用数组和链表结合的方式，来解决哈希冲突的问题，JDK1.8之后还引入了红黑树来优化性能。\n文章还介绍了一些Java集合中的底层实现细节，例如HashMap中的扰动函数、loadFactor加载因子、threshold临界值等。这些细节对于理解集合的工作原理非常重要，也可以帮助我们更好地使用Java集合。\n总之，Java集合是Java编程中非常常用的一部分，掌握好集合的使用方法和底层实现细节，可以帮助我们编写更高效、更易维护的Java代码。",
        "sort": "",
        "title": "Java基础-集合",
        "status": "Published",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Java-ba68c9c47d5d464080d9c123616ea287",
      "public_url": "https://honesty-blog.notion.site/Java-ba68c9c47d5d464080d9c123616ea287"
    },
    {
      "object": "page",
      "id": "f2eefe59-c1ef-4dba-847d-6525d1ddc518",
      "created_time": "2023-03-30T06:35:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102223244.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-03-12",
        "type": "Post",
        "category": "技术分享",
        "urlname": "42",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java",
          "Jvm"
        ],
        "summary": "Java基础-JVM是Java开发者必须要掌握的重要知识点之一，JVM全称为Java Virtual Machine（Java虚拟机），它是Java程序运行的环境，在Java编程中具有极其重要的作用。\n作为Java语言的核心，JVM能够通过将Java代码编译为字节码，再通过字节码的解释器实现Java程序的运行。JVM负责管理应用程序的内存、多线程、垃圾回收等操作，是实现跨平台、自动垃圾回收、安全性高等特性的关键。\n要深入理解JVM，需要掌握JVM的内部机制，包括虚拟机类加载器、运行时数据区域、字节码执行引擎等方面。此外，对于JVM的性能调优及故障排查也非常重要，能够帮助开发者优化应用程序的运行效率。\n总之，掌握Java基础-JVM是Java开发者必须要具备的知识技能，它可以帮助你更好地理解Java程序的运行机制，提高开发效率，提升应用程序的性能以及稳定性。",
        "sort": "",
        "title": "Java基础-JVM",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102223244.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Java-JVM-f2eefe59c1ef4dba847d6525d1ddc518",
      "public_url": "https://honesty-blog.notion.site/Java-JVM-f2eefe59c1ef4dba847d6525d1ddc518"
    },
    {
      "object": "page",
      "id": "bcd4f723-5f6a-4d94-90a1-63bb8c6dbfcf",
      "created_time": "2023-03-30T06:32:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102220554.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-06-02",
        "type": "Post",
        "category": "技术分享",
        "urlname": "18",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "缓存"
        ],
        "summary": "Spring Cache是Spring框架用于支持缓存的模块。它提供了一组缓存抽象，使得我们可以将不同的缓存技术集成到应用程序中，从而提高性能和可扩展性。Spring Cache通过使用轻量级的注释来定义缓存的行为，从而减少了缓存操作的复杂性。此外，Spring Cache还支持事务性缓存，这样可以保证缓存与数据库之间的一致性。总体来说，Spring Cache是一个强大的工具，可以极大地提高应用程序的性能和可用性。",
        "sort": "",
        "title": "spring cache",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102220554.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/spring-cache-bcd4f7235f6a4d9490a163bb8c6dbfcf",
      "public_url": "https://honesty-blog.notion.site/spring-cache-bcd4f7235f6a4d9490a163bb8c6dbfcf"
    },
    {
      "object": "page",
      "id": "76be662e-68e2-4e75-8d51-c66197e850d3",
      "created_time": "2023-03-30T06:30:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102218981.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2020-07-23",
        "type": "Post",
        "category": "技术分享",
        "urlname": "9",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "Java",
          "Redis"
        ],
        "summary": "记录一次scan和keys的使用,scan和key都是redis搜索key的值函数,但实现却完全不同。生产环境用key的同学准备好跑路吧~keysWarning: consider KEYS as a",
        "sort": "",
        "title": "RedisOperations scan 用法",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102218981.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/RedisOperations-scan-76be662e68e24e758d51c66197e850d3",
      "public_url": "https://honesty-blog.notion.site/RedisOperations-scan-76be662e68e24e758d51c66197e850d3"
    },
    {
      "object": "page",
      "id": "a1eb98de-4986-46c0-b1ac-6846629d0819",
      "created_time": "2023-03-30T06:28:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/nasa_tim_peake_spacewalk.jpg"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-04-10",
        "type": "Post",
        "category": "技术分享",
        "urlname": "21",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "Java",
          "响应式",
          "异步编程",
          "WebFlux"
        ],
        "summary": "webFlux 初识LambdaLambda 表达式，有时候也称为匿名函数或箭头函数，几乎在当前的各种主流的编程语言中都有它的身影。Java8 中引入 Lambda 表达式，使原本需要用匿名类实现接口",
        "sort": "",
        "title": "响应式开发之webFlux & Reactor",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/nasa_tim_peake_spacewalk.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/webFlux-Reactor-a1eb98de498646c0b1ac6846629d0819",
      "public_url": "https://honesty-blog.notion.site/webFlux-Reactor-a1eb98de498646c0b1ac6846629d0819"
    },
    {
      "object": "page",
      "id": "44263dbd-e5d6-4365-a72e-b0ff92bd0220",
      "created_time": "2023-03-30T06:26:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://www.notion.so/images/page-cover/webb2.jpg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🥅"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-08-27",
        "type": "Post",
        "category": "技术分享",
        "urlname": "20",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "微服务",
          "分布式",
          "Redis"
        ],
        "summary": "在SpringCloud体系中，我们知道服务之间的调用是通过http协议进行调用的。而注册中心的主要目的就是维护这些服务的服务列表。我们知道，在Spring中，提供了RestTemplate。RestTemplate是Spring提供的用于访问Rest服务的客户端。而在SpringCloud中也是使用此服务进行服务调用的。",
        "sort": "",
        "title": "RestTemplate与OpenFeign",
        "status": "Published",
        "cover": "https://www.notion.so/images/page-cover/webb2.jpg",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/RestTemplate-OpenFeign-44263dbde5d64365a72eb0ff92bd0220",
      "public_url": "https://honesty-blog.notion.site/RestTemplate-OpenFeign-44263dbde5d64365a72eb0ff92bd0220"
    },
    {
      "object": "page",
      "id": "f81c2940-d22e-4782-9d95-d16b57f6d3f4",
      "created_time": "2023-03-30T06:25:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102218848.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-12-18",
        "type": "Post",
        "category": "技术分享",
        "urlname": "23",
        "catalog": [
          "archives"
        ],
        "tags": [
          "微服务",
          "分布式",
          "Redis"
        ],
        "summary": "一致性hash在Redis 集群模式Cluster中，Redis采用的是分片Sharding的方式，也就是将数据采用一定的分区策略，分发到相应的集群节点中。但是我们使用上述HASH算法进行缓存时，会出",
        "sort": "",
        "title": "Redis集群与特性",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102218848.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Redis-f81c2940d22e47829d95d16b57f6d3f4",
      "public_url": "https://honesty-blog.notion.site/Redis-f81c2940d22e47829d95d16b57f6d3f4"
    },
    {
      "object": "page",
      "id": "807ec69b-8970-4659-8443-d224934a8e7f",
      "created_time": "2023-03-30T06:22:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102216883.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2021-12-27",
        "type": "Post",
        "category": "技术分享",
        "urlname": "24",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "Java"
        ],
        "summary": "springBoot 三板斧AOPaop是一种面向切面编程 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（缓存，锁） 封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可",
        "sort": "",
        "title": "springBoot三剑客",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102216883.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/springBoot-807ec69b897046598443d224934a8e7f",
      "public_url": "https://honesty-blog.notion.site/springBoot-807ec69b897046598443d224934a8e7f"
    },
    {
      "object": "page",
      "id": "747841e4-eeac-4349-88b0-63fc6421cf0c",
      "created_time": "2023-03-30T06:18:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://blog-file.hehouhui.cn/image-1647847160115.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-02-08",
        "type": "Post",
        "category": "技术分享",
        "urlname": "37",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Java"
        ],
        "summary": "synchronized 关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。另外，在 Ja",
        "sort": "",
        "title": "Java基础-锁",
        "status": "Published",
        "cover": "https://blog-file.hehouhui.cn/image-1647847160115.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Java-747841e4eeac434988b063fc6421cf0c",
      "public_url": "https://honesty-blog.notion.site/Java-747841e4eeac434988b063fc6421cf0c"
    },
    {
      "object": "page",
      "id": "397d5281-9f11-4c6f-8430-399176cc403d",
      "created_time": "2023-03-30T06:16:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102214388.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-02-21",
        "type": "Post",
        "category": "技术分享",
        "urlname": "38",
        "catalog": [
          "archives"
        ],
        "tags": [
          "mysql"
        ],
        "summary": "Mysql数据库存储引擎MyISAM引擎 不支持事务支持表级锁（MySql支持两种表级锁，表共享读锁和表独占写锁），但不支持行级锁存储表的总行数一个MyISAM表有三个文件：索引文件（.MYI",
        "sort": "",
        "title": "Mysql数据结构&锁",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102214388.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/Mysql-397d52819f114c6f8430399176cc403d",
      "public_url": "https://honesty-blog.notion.site/Mysql-397d52819f114c6f8430399176cc403d"
    },
    {
      "object": "page",
      "id": "07c3aa88-08b7-4093-9ac6-0a495a187163",
      "created_time": "2023-03-30T06:14:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://blog-file.hehouhui.cn/image-1647847511877.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "39",
        "catalog": [
          "archives"
        ],
        "tags": [
          "图像处理"
        ],
        "summary": "wkhtmltopdf精讲(原文) 作者：JSON_NULL术语定义文档对象“文档对象”是指PDF文档中的文档对象，共有三种类型的“文档对象”，他们分别是“页面对象”，“封面对象”和“目录对象”。页面",
        "sort": "",
        "title": "wkhtmltopdf详细使用",
        "status": "Published",
        "cover": "https://blog-file.hehouhui.cn/image-1647847511877.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/wkhtmltopdf-07c3aa8808b740939ac60a495a187163",
      "public_url": "https://honesty-blog.notion.site/wkhtmltopdf-07c3aa8808b740939ac60a495a187163"
    },
    {
      "object": "page",
      "id": "a60e468f-c55d-4add-a043-970fc03927d0",
      "created_time": "2023-03-30T06:09:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102132809.jpeg"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-15",
        "type": "Post",
        "category": "技术分享",
        "urlname": "40",
        "catalog": [
          "archives"
        ],
        "tags": [
          "图像处理"
        ],
        "summary": "“wkhtmltopdf\"，是一个能够把网页/文件转换成PDF的工具。工具全名叫 \"wkhtmltopdf\" ; 是一个使用 Qt WebKit 引擎做渲染的，能够把html 文档转换成 pdf 文档 或 图片(image) 的**“命令行工具”**。\n支持多个平台，可在win，linux，os x 等系统下运行。",
        "sort": "",
        "title": "wkhtmltopdf 安装",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102132809.jpeg",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/wkhtmltopdf-a60e468fc55d4adda043970fc03927d0",
      "public_url": "https://honesty-blog.notion.site/wkhtmltopdf-a60e468fc55d4adda043970fc03927d0"
    },
    {
      "object": "page",
      "id": "6a6aca31-1871-49f3-a600-5062cb673260",
      "created_time": "2023-03-27T03:18:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102212132.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-17",
        "type": "Post",
        "category": "技术分享",
        "urlname": "41",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Python",
          "健康"
        ],
        "summary": "之前一直使用ffmpeg来进行格式转换，但是将微信的amr转为mp3后语音质量不理想（也可能是我参数没有调正确🤪）。\n于是就继续想解决办法，后来在github瞎逛时看到可以使用silk-v3-decoder来做这件事情。虽然本质上还是使用的ffmpeg来转的，只是封装了一下。",
        "sort": "",
        "title": "silk-v3-decoder 一款微信音频转码的工具",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102212132.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/silk-v3-decoder-6a6aca31187149f3a6005062cb673260",
      "public_url": "https://honesty-blog.notion.site/silk-v3-decoder-6a6aca31187149f3a6005062cb673260"
    },
    {
      "object": "page",
      "id": "0d2fc9f8-00d3-40d8-b7bb-cc4dbbb10251",
      "created_time": "2023-03-27T03:18:00.000Z",
      "last_edited_time": "2023-10-08T06:42:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102209640.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2022-03-05",
        "type": "Post",
        "category": "技术分享",
        "urlname": "46",
        "catalog": [
          "archives"
        ],
        "tags": [
          "Spring",
          "微服务",
          "分布式"
        ],
        "summary": "API 网关是一个服务器，是系统对外的唯一入口。API 网关封装了系统内部架构，为每个客户端提供定制的 API。所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有非业务功能。API 网关并不是微服务场景中必须的组件，如下图，不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问",
        "sort": "",
        "title": "API网关之Gateway",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102209640.png",
        "updated": "2023-10-08 14:42:00"
      },
      "url": "https://www.notion.so/API-Gateway-0d2fc9f800d340d8b7bbcc4dbbb10251",
      "public_url": "https://honesty-blog.notion.site/API-Gateway-0d2fc9f800d340d8b7bbcc4dbbb10251"
    },
    {
      "object": "page",
      "id": "ad9e51f4-9713-4168-8a9d-276033c3998a",
      "created_time": "2023-11-04T14:30:00.000Z",
      "last_edited_time": "2023-11-08T07:58:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202311042246840.png"
        }
      },
      "icon": null,
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-11-04",
        "type": "Post",
        "category": "技术分享",
        "urlname": "java-sync-introduce-1104",
        "catalog": [
          "archives"
        ],
        "tags": [
          "异步编程",
          "Java",
          "多线程"
        ],
        "summary": "异步执行对于开发者来说并不陌生，在实际的开发过程中，很多场景多会使用到异步，相比同步执行，异步可以大大缩短请求链路耗时时间，比如：发送短信、邮件、异步更新等，这些都是典型的可以通过异步实现的场景。1. 线程Thread\n2. Future\n3. 异步框架CompletableFuture\n4. Spring注解@Async\n5. Spring ApplicationEvent事件\n6. 消息队列\n7. 第三方异步框架，比如Hutool的ThreadUtil\n8. Guava异步",
        "sort": "",
        "title": "Java异步编程方式介绍",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202311042246840.png",
        "updated": "2023-11-08 15:58:00"
      },
      "url": "https://www.notion.so/Java-ad9e51f4971341688a9d276033c3998a",
      "public_url": "https://honesty-blog.notion.site/Java-ad9e51f4971341688a9d276033c3998a"
    },
    {
      "object": "page",
      "id": "e228a385-fd1f-4229-bf2e-2a3e004ad59a",
      "created_time": "2023-04-28T04:47:00.000Z",
      "last_edited_time": "2023-11-02T08:24:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102206180.png"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "",
        "icon": "",
        "date": "2023-04-28",
        "type": "Post",
        "category": "技术分享",
        "urlname": "keycloak-client-oauth-guide",
        "catalog": [
          "archives"
        ],
        "tags": [
          "建站",
          "keycloak",
          "oauth"
        ],
        "summary": "",
        "sort": "",
        "title": "Keycloak 客户端授权服务",
        "status": "Published",
        "cover": "https://cdn.jsdelivr.net/gh/listener-He/images@default/202305102206180.png",
        "updated": "2023-11-02 16:24:00"
      },
      "url": "https://www.notion.so/Keycloak-e228a385fd1f4229bf2e2a3e004ad59a",
      "public_url": "https://honesty-blog.notion.site/Keycloak-e228a385fd1f4229bf2e2a3e004ad59a"
    },
    {
      "object": "page",
      "id": "2084bf16-87dd-4741-89fd-c9e9116ebcbc",
      "created_time": "2023-04-18T14:59:00.000Z",
      "last_edited_time": "2023-11-02T08:31:00.000Z",
      "created_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "last_edited_by": {
        "object": "user",
        "id": "a62f8c60-4c10-40c8-aa57-ef88b58f25a4"
      },
      "cover": {
        "type": "external",
        "external": {
          "url": "https://source.unsplash.com/random/720x480/?encryption"
        }
      },
      "icon": {
        "type": "emoji",
        "emoji": "🗒️"
      },
      "parent": {
        "type": "database_id",
        "database_id": "e2aef2eb-e7a1-4fc0-94f9-a186b6be6efa"
      },
      "archived": false,
      "properties": {
        "password": "GlUw3Orb@0L9Dh{ox}W71jA$4,2SY8t-",
        "icon": "",
        "date": "2023-04-18",
        "type": "Post",
        "category": "",
        "urlname": "20230417",
        "catalog": [
          "archives"
        ],
        "tags": [],
        "summary": "",
        "sort": "",
        "title": "软件架构&数据安全说明",
        "status": "Published",
        "cover": "https://source.unsplash.com/random/720x480/?encryption",
        "updated": "2023-11-02 16:31:00"
      },
      "url": "https://www.notion.so/2084bf1687dd474189fdc9e9116ebcbc",
      "public_url": "https://honesty-blog.notion.site/2084bf1687dd474189fdc9e9116ebcbc"
    }
  ]
}